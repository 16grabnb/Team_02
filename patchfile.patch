diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseAddInstrumentedTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseAddInstrumentedTest.kt
index 4ef41b0..fb2d905 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseAddInstrumentedTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseAddInstrumentedTest.kt
@@ -2,7 +2,7 @@ package com.backend.todo_tasker
 
 import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import com.backend.todo_tasker.database.Todo
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -19,12 +19,12 @@ class DataBaseAddInstrumentedTest {
     fun singleAddPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
-        val testTodo = Todo(6, "Test", timeInMillis)
+        val testTodo = Todo(6, "Test", timeInMillis, 0)
 
         val retVal = db.addToDb(datab, testTodo)
         assertNotEquals(retVal, -1)
@@ -34,13 +34,13 @@ class DataBaseAddInstrumentedTest {
     fun multiAddPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
         for(i in 0..50) {
-            val testTodo = Todo(i, "Test", timeInMillis)
+            val testTodo = Todo(i, "Test", timeInMillis, 0)
             val retVal = db.addToDb(datab, testTodo)
             assertNotEquals(retVal, -1)
         }
@@ -50,17 +50,17 @@ class DataBaseAddInstrumentedTest {
     fun multiUIDFail() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
-        var testTodo = Todo(1337, "TestThatPasses", timeInMillis)
+        var testTodo = Todo(1337, "TestThatPasses", timeInMillis, 0)
         var retVal = db.addToDb(datab, testTodo)
         assertNotEquals(retVal, -1)
 
         for(i in 0..50) {
-            testTodo = Todo(1337, "TestThatFails", timeInMillis)
+            testTodo = Todo(1337, "TestThatFails", timeInMillis, 0)
             retVal = db.addToDb(datab, testTodo)
             assertEquals(retVal, -1)
         }
diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseBasicInstrumentedTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseBasicInstrumentedTest.kt
index f363703..b8f03da 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseBasicInstrumentedTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseBasicInstrumentedTest.kt
@@ -3,7 +3,7 @@ package com.backend.todo_tasker
 import androidx.test.ext.junit.runners.AndroidJUnit4
 import androidx.test.filters.MediumTest
 import androidx.test.platform.app.InstrumentationRegistry
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import com.backend.todo_tasker.database.Todo
 import org.junit.Test
 import org.junit.runner.RunWith
@@ -15,10 +15,10 @@ class DataBaseBasicInstrumentedTest {
     fun addModify() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
-        val toInsert : Todo = Todo(1,"test",3)
+        val toInsert : Todo = Todo(1,"test",3, 0)
 
         db.addToDb(datab, toInsert)
         var varget = db.getLastEntry(datab)
@@ -32,11 +32,11 @@ class DataBaseBasicInstrumentedTest {
     fun DuplicateTest(){
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
-        val toDuplicate:Todo = Todo(1,"notDouble", 42)
+        val toDuplicate:Todo = Todo(1,"notDouble", 42, 0)
         assert(db.addToDb(datab, toDuplicate)==0)
 
         db.duplicateDBEntry(datab, 1)
@@ -47,11 +47,11 @@ class DataBaseBasicInstrumentedTest {
     fun DeleteTest() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
-        val toInsert:Todo = Todo(1,"toDelete", 1338)
+        val toInsert:Todo = Todo(1,"toDelete", 1338, 0)
         db.addToDb(datab,toInsert)
         var varget = db.getLastEntry(datab)
         assert(varget.uid == 1 && varget.title == "toDelete" && varget.date == 1338.toLong())
diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseReminderInstrumentedTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseReminderInstrumentedTest.kt
index 55ae913..b33066d 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseReminderInstrumentedTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseReminderInstrumentedTest.kt
@@ -2,7 +2,7 @@ package com.backend.todo_tasker
 
 import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import com.backend.todo_tasker.database.Todo
 
 import org.junit.Test
@@ -22,12 +22,12 @@ class DataBaseReminderInstrumentedTest {
     fun singleAddPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
-        val testTodo = Todo(6, "Test", timeInMillis)
+        val testTodo = Todo(6, "Test", timeInMillis, 0)
 
         val retVal = db.addToDb(datab, testTodo)
         assertNotEquals(retVal, -1)
@@ -38,13 +38,13 @@ class DataBaseReminderInstrumentedTest {
     fun multiAddPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
         for(i in 0..50) {
-            val testTodo = Todo(i, "Test", timeInMillis)
+            val testTodo = Todo(i, "Test", timeInMillis, 0)
             val retVal = db.addToDb(datab, testTodo)
             assertNotEquals(retVal, -1)
         }
@@ -55,17 +55,17 @@ class DataBaseReminderInstrumentedTest {
     fun multiUIDFail() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
-        var testTodo = Todo(1337, "TestThatPasses", timeInMillis)
+        var testTodo = Todo(1337, "TestThatPasses", timeInMillis, 0)
         var retVal = db.addToDb(datab, testTodo)
         assertNotEquals(retVal, -1)
 
         for(i in 0..50) {
-            testTodo = Todo(1337, "TestThatFails", timeInMillis)
+            testTodo = Todo(1337, "TestThatFails", timeInMillis, 0)
             retVal = db.addToDb(datab, testTodo)
             assertEquals(retVal, -1)
         }
@@ -75,13 +75,13 @@ class DataBaseReminderInstrumentedTest {
     fun getNewestReminder() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
         for(i in 0..3) {
-            var testTodo = Todo(i, "TestThatPasses", timeInMillis + (i * 60000))
+            var testTodo = Todo(i, "TestThatPasses", timeInMillis + (i * 60000), 0)
             var retVal = db.addToDb(datab, testTodo)
         }
 
diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseSelectInstrumentedTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseSelectInstrumentedTest.kt
index 180025a..abd3781 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseSelectInstrumentedTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker/DataBaseSelectInstrumentedTest.kt
@@ -2,7 +2,7 @@ package com.backend.todo_tasker
 
 import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import com.backend.todo_tasker.database.Todo
 
 import org.junit.Test
@@ -22,12 +22,12 @@ class DataBaseSelectInstrumentedTest {
     fun singleSelectPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
-        val testTodo = Todo(6, "Test", timeInMillis)
+        val testTodo = Todo(6, "Test", timeInMillis, 0)
 
         // Add a single entry into the Database
         val retVal = db.addToDb(datab, testTodo)
@@ -46,14 +46,14 @@ class DataBaseSelectInstrumentedTest {
     fun multiSelectPass() {
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
         // Add 51 differing entries to the Database
         val timeInMillis = db.dateToMillis(db.getCurrentDate())
         for(i in 0..50) {
-            val testTodo = Todo(i, "Test", timeInMillis)
+            val testTodo = Todo(i, "Test", timeInMillis, 0)
             val retVal = db.addToDb(datab, testTodo)
             assertNotEquals(retVal, -1)
         }
@@ -64,7 +64,7 @@ class DataBaseSelectInstrumentedTest {
 
         // Check if all of the entries are there
         for(i in 0..50) {
-            assert(todos[i] == Todo(i, "Test", timeInMillis))
+            assert(todos[i] == Todo(i, "Test", timeInMillis, 0))
         }
     }
 }
\ No newline at end of file
diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/EndToEndTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/EndToEndTest.kt
index c388eff..009db2d 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/EndToEndTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/EndToEndTest.kt
@@ -16,7 +16,7 @@ import androidx.test.rule.ActivityTestRule
 import androidx.test.runner.AndroidJUnit4
 import com.backend.todo_tasker.MainActivity
 import com.backend.todo_tasker.R
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import org.hamcrest.Description
 import org.hamcrest.Matcher
 import org.hamcrest.Matchers.`is`
@@ -38,7 +38,7 @@ class EndToEndTest {
     fun endToEndTest() {
         val appContext = ApplicationProvider.getApplicationContext<Application>()
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         val datab = db.createDb()
         db.deleteDBEntries(datab)
 
diff --git a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/ReminderNotificationShowUpRecordedTest.kt b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/ReminderNotificationShowUpRecordedTest.kt
index d11ff76..7da7b86 100644
--- a/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/ReminderNotificationShowUpRecordedTest.kt
+++ b/TodoTasker/app/src/androidTest/java/com/backend/todo_tasker_long/ReminderNotificationShowUpRecordedTest.kt
@@ -18,7 +18,7 @@ import androidx.test.uiautomator.UiObject2
 import androidx.test.uiautomator.Until
 import com.backend.todo_tasker.MainActivity
 import com.backend.todo_tasker.R
-import com.backend.todo_tasker.database.DatabaseClass
+import com.backend.todo_tasker.database.DatabaseTodoClass
 import com.backend.todo_tasker.todoDb
 import junit.framework.Assert.assertEquals
 import org.hamcrest.Description
@@ -48,7 +48,7 @@ class ReminderNotificationShowUpRecordedTest {
         val notificationText =  appContext.getString(R.string.NOTIFICATION_TEXT)
         val timeout:Long =  90 * 1000
 
-        val db = DatabaseClass(appContext)
+        val db = DatabaseTodoClass(appContext)
         db.deleteDBEntries(todoDb)
 
         val calendar = Calendar.getInstance()
diff --git a/TodoTasker/app/src/main/java/com/backend/todo_tasker/MainActivity.kt b/TodoTasker/app/src/main/java/com/backend/todo_tasker/MainActivity.kt
index 2df588b..426b249 100644
--- a/TodoTasker/app/src/main/java/com/backend/todo_tasker/MainActivity.kt
+++ b/TodoTasker/app/src/main/java/com/backend/todo_tasker/MainActivity.kt
@@ -2,7 +2,6 @@ package com.backend.todo_tasker
 
 import android.os.Bundle
 import android.view.*
-import android.view.animation.AnimationUtils
 import android.widget.*
 import androidx.appcompat.app.AppCompatActivity
 import com.backend.todo_tasker.background_service.NotificationHelper
@@ -10,8 +9,6 @@ import androidx.recyclerview.widget.DividerItemDecoration
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.backend.todo_tasker.button_functions.DateTimePickerFunctions
-import com.backend.todo_tasker.database.DatabaseClass
-import com.backend.todo_tasker.database.TodoDatabase
 import com.backend.todo_tasker.db_operations.DbOperations
 import com.backend.todo_tasker.language.LanguageHelper
 import com.backend.todo_tasker.popup_window.PopUpWindowInflater
@@ -19,12 +16,19 @@ import com.backend.todo_tasker.popup_window.WINDOWTYPE
 import com.backend.todo_tasker.tasklist_view.RecyclerAdapter
 import java.util.concurrent.Semaphore
 import androidx.appcompat.widget.Toolbar
+import com.backend.todo_tasker.database.*
+import kotlinx.coroutines.GlobalScope
+import kotlinx.coroutines.launch
 
 
-lateinit var dbClass: DatabaseClass
+lateinit var dbTodoClass: DatabaseTodoClass
 lateinit var todoDb: TodoDatabase
 
-val sharedDbLock = Semaphore(1)
+lateinit var dbCategoryClass: DatabaseCategoryClass
+lateinit var categoryDb: CategoryDatabase
+
+val sharedTodoDbLock = Semaphore(1)
+val sharedCategoryDbLock = Semaphore(1)
 
 private var languageHelper = LanguageHelper()
 val notificationHelper = NotificationHelper()
@@ -42,8 +46,16 @@ class MainActivity : AppCompatActivity() {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
-        dbClass = DatabaseClass(applicationContext)
-        todoDb = dbClass.createDb()
+        dbTodoClass = DatabaseTodoClass(applicationContext)
+        todoDb = dbTodoClass.createDb()
+
+        dbCategoryClass = DatabaseCategoryClass(applicationContext)
+        categoryDb = dbCategoryClass.createDb()
+        GlobalScope.launch {
+            sharedCategoryDbLock.acquire()
+            dbCategoryClass.addToDb(categoryDb, Category(0, null, null, null))
+            sharedCategoryDbLock.release()
+        }
 
         todoList = findViewById(R.id.todo_list)
         todoList?.adapter = RecyclerAdapter().getInstance()
@@ -95,7 +107,7 @@ class MainActivity : AppCompatActivity() {
         val title = textField?.text.toString()
         val date = taskTimeMillis
 
-        DbOperations().getInstance().addOperation(title, date)
+        DbOperations().getInstance().addOperation(title, date, 0) // Find Category from UID
 
         alarmHelper.replaceNextAlarm(applicationContext, date)
         cancelAddActivity(view)
diff --git a/TodoTasker/app/src/main/java/com/backend/todo_tasker/background_service/BackgroundService.kt b/TodoTasker/app/src/main/java/com/backend/todo_tasker/background_service/BackgroundService.kt
index 8963a19..5f3471e 100644
--- a/TodoTasker/app/src/main/java/com/backend/todo_tasker/background_service/BackgroundService.kt
+++ b/TodoTasker/app/src/main/java/com/backend/todo_tasker/background_service/BackgroundService.kt
@@ -25,9 +25,9 @@ class AlarmHelper {
 
     fun setNextAlarm(context: Context?) {
         GlobalScope.launch {
-            sharedDbLock.acquire()
-            val todo = dbClass.getNextDate(todoDb)
-            sharedDbLock.release()
+            sharedTodoDbLock.acquire()
+            val todo = dbTodoClass.getNextDate(todoDb)
+            sharedTodoDbLock.release()
             cancelAlarm(context, liveAlarmID)
             if(todo != null && todo.date != null) {
                 setNewAlarm(context, todo.date)
diff --git a/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/DatabaseTodoClass.kt b/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/DatabaseTodoClass.kt
index 12bc1a1..f5b17fa 100644
--- a/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/DatabaseTodoClass.kt
+++ b/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/DatabaseTodoClass.kt
@@ -4,7 +4,7 @@ import android.content.Context
 import androidx.room.Room
 import java.util.*
 
-class DatabaseClass(context: Context) {
+class DatabaseTodoClass(context: Context) {
     private var appContext = context
 
     fun createDb(): TodoDatabase {
diff --git a/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/Todo.kt b/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/Todo.kt
index 2328299..f87d172 100644
--- a/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/Todo.kt
+++ b/TodoTasker/app/src/main/java/com/backend/todo_tasker/database/Todo.kt
@@ -5,14 +5,15 @@ import androidx.room.Entity
 import androidx.room.PrimaryKey
 
 // Database To-do Structure:
-//   - UID [x]
-//   - Titel [x]
-//   - Datum [x]
+//   - UID
+//   - Titel
+//   - Datum
 //   - [Opt] Beschreibung
 //   - [Opt] Erstellungsdatum+Zeit
 @Entity
 data class Todo(
         @PrimaryKey val uid: Int,
         @ColumnInfo(name = "title") val title: String?,
-        @ColumnInfo(name = "date") val date: Long?
+        @ColumnInfo(name = "date") val date: Long?,
+        @ColumnInfo(name = "category") val category: Int
 )
diff --git a/TodoTasker/app/src/main/java/com/backend/todo_tasker/db_operations/DbOperations.kt b/TodoTasker/app/src/main/java/com/backend/todo_tasker/db_operations/DbOperations.kt
index d8d4471..745db40 100644
--- a/TodoTasker/app/src/main/java/com/backend/todo_tasker/db_operations/DbOperations.kt
+++ b/TodoTasker/app/src/main/java/com/backend/todo_tasker/db_operations/DbOperations.kt
@@ -22,7 +22,7 @@ class DbOperations {
 
     fun refreshListView() {
         GlobalScope.launch {
-            val data = dbClass.getAllDb(todoDb)
+            val data = dbTodoClass.getAllDb(todoDb)
             todoList?.post {
                 RecyclerAdapter().getInstance().setData(data)
                 adapter = RecyclerAdapter().getInstance()
@@ -31,32 +31,34 @@ class DbOperations {
         }
     }
 
-    fun addOperation(title: String, date: Long) {
+    fun addOperation(title: String, date: Long, category: Int) {
         GlobalScope.launch {
-            sharedDbLock.acquire()
-            if (dbClass.getLastEntry(todoDb) == null) { // This is not always false...
-                dbClass.addToDb(todoDb, Todo(0,
+            sharedTodoDbLock.acquire()
+            if (dbTodoClass.getLastEntry(todoDb) == null) { // This is not always false...
+                dbTodoClass.addToDb(todoDb, Todo(0,
                         title,
-                        date))
+                        date,
+                        category))
             } else {
-                dbClass.addToDb(todoDb, Todo(dbClass.getLastEntry(todoDb).uid + 1,
+                dbTodoClass.addToDb(todoDb, Todo(dbTodoClass.getLastEntry(todoDb).uid + 1,
                         title,
-                        date))
+                        date,
+                        category))
             }
             refreshListView()
             todoList?.post {
                 todoList!!.adapter?.itemCount?.let { todoList?.layoutManager?.scrollToPosition(it - 1) }
             }
-            sharedDbLock.release()
+            sharedTodoDbLock.release()
         }
     }
 
     fun duplicateOperation(UID: Int, adapterPosition: Int) {
         GlobalScope.launch {
-            sharedDbLock.acquire()
-            dbClass.duplicateDBEntry(todoDb, UID)
+            sharedTodoDbLock.acquire()
+            dbTodoClass.duplicateDBEntry(todoDb, UID)
             refreshListView()
-            sharedDbLock.release()
+            sharedTodoDbLock.release()
             todoList?.post {
                 todoList?.scrollToPosition(adapterPosition)
             }
@@ -66,10 +68,10 @@ class DbOperations {
 
     fun deleteOperation(UID: Int, adapterPosition: Int) {
         GlobalScope.launch {
-            sharedDbLock.acquire()
-            dbClass.deleteDBSingleEntry(todoDb, UID)
+            sharedTodoDbLock.acquire()
+            dbTodoClass.deleteDBSingleEntry(todoDb, UID)
             refreshListView()
-            sharedDbLock.release()
+            sharedTodoDbLock.release()
             todoList?.post {
                 todoList?.scrollToPosition(adapterPosition)
             }
@@ -78,13 +80,13 @@ class DbOperations {
 
     fun updateOperation(uid: Int, title: String, date: Long, adapterPosition: Int) {
         GlobalScope.launch {
-            sharedDbLock.acquire()
-            dbClass.updateEntry(todoDb,
+            sharedTodoDbLock.acquire()
+            dbTodoClass.updateEntry(todoDb,
                     uid,
                     title,
                     date)
             refreshListView()
-            sharedDbLock.release()
+            sharedTodoDbLock.release()
             todoList?.post {
                 todoList?.scrollToPosition(adapterPosition)
             }
